'''
Program : CJ Orders.py
Author : Jonathan Hernandez
Date : 02/17/2021
Notes: This program retrieves The CJ Orders from Commission Junction, and then checks their Financial Status on Shopify.
       An excel report containing this information will be placed on your desktop.
'''


import sys
import os
import os.path
from easygui import *
import datetime
from datetime import date
from datetime import timedelta
from graphqlclient import GraphQLClient
import pandas as pd
import json


ProgramName ="CJ Orders"

# get date range of report
start_date = enterbox(message="Enter Start Date of Report MM/DD/YYYY", title=ProgramName)
if start_date == None:
    textbox(text="ABORTING: no date entered")
    sys.exit()
try:
    start_month, start_day, start_year = start_date.split('/')
except:
    textbox(text="ABORTING: invalid start date format entered")
    sys.exit()
if len(start_year) == 2:
    start_year = "20" + start_year

end_date = enterbox(message="Enter End Date of Report MM/DD/YYYY", title=ProgramName)
if end_date == None:
    textbox(text="ABORTING: no date entered")
    sys.exit()
try:
    end_month, end_day, end_year = end_date.split('/')
    #end_day = int(end_day)
    #end_day ="0{}".format(str(end_day))
except:
    textbox(text="ABORTING: invalid end date format entered")
    sys.exit()
if len(end_year) == 2:
    end_year = "20" + end_year
BeginDate= '"{}-{}-{}T00:00:00Z"'.format(start_year,start_month,start_day)
EndDate= '"{}-{}-{}T00:00:00Z"'.format(end_year,end_month,end_day)

TestBegin= date(int(start_year),int(start_month),int(start_day))
print TestBegin
TestEnd = date(int(end_year),int(end_month),int(end_day))
print TestEnd
delta = TestEnd-TestBegin
print(delta.days)
if delta.days >= 28:
    textbox(text="ABORTING: Date range is too large for Commission Junction Query. (27 days Max)")
    sys.exit()




WORKDIR = "c:\\temp"
DESKTOP = 'c:' + os.environ['HOMEPATH'] + "\Desktop"
os.chdir(DESKTOP)


def main():

    client = GraphQLClient('https://commissions.api.cj.com/query')
    client.inject_token('###### ##########################')
    query = """{advertiserCommissions(forAdvertisers: ["#######"], sincePostingDate: %s,
    beforePostingDate: %s) {
    count    payloadComplete
    records {
        commissionId
        orderId
        advertiserId
        actionTrackerName
        websiteName
        advertiserName
        postingDate
        items {
        quantity
        perItemSaleAmountPubCurrency
        totalCommissionPubCurrency      }    }  }} """ % (BeginDate,EndDate)
    results = client.execute(query)
    CJjson = json.loads(results)
    CJlist = str(CJjson).split()
    OrderIDS = []
    for x in range(0, len(CJlist)):
        orderid = CJlist[x].find("'orderId':")
        if orderid == 1:
            next = CJlist[x + 1]
            next = (next).rstrip("',")
            next = next.lstrip("u'")
            if len(next) > 5:
                OrderIDS.append(next)
    #print OrderIDS
    connect(OrderIDS)


#Shopify API connection
def connect(NOIDS):
    OrderIDS1 = []
    Statuses = []
    CreatedDate = []
    for OrderID in NOIDS:
        client = GraphQLClient('https://##########.myshopify.com/admin/api/####-##/graphql.json')
        client.inject_token('################################')

        query = """query myQuery {
         orders(first: 1, query:"name:%s") {
          edges {
           cursor
           node {
            createdAt
            id
            name
            displayFulfillmentStatus
            displayFinancialStatus
            refunds {
              id
            }
           }
          }
          pageInfo {
           hasNextPage
          }
         }
        }

        """% (OrderID)

        results = client.execute(query)
        CJjson = json.loads(results)
        CJlist = str(CJjson).split()
        for x in range(0, len(CJlist)):
            if 'name' in CJlist[x]:
                next = CJlist[x + 1]
                next = (next).rstrip("',")
                next = next.lstrip("u'")
                if len(next) > 5:
                    OrderIDS1.append(next)
            elif 'displayFinancialStatus' in CJlist[x]:
                status = CJlist[x + 1]
                status = status.rstrip("',")
                status = status.lstrip("u'")
                Statuses.append(status)
            elif 'createdAt'in CJlist[x]:
                Created = CJlist[x + 1]
                Created = Created.rstrip("',")
                Created = Created.lstrip("u'")
                Created = Created.split("T")
                CreatedDate.append(Created[0])
    ShopifyDict = {'CJ Order Ids':OrderIDS1,'Financial Status in Shopify':Statuses, 'Date Created in Shopify':CreatedDate}
    SHdf = pd.DataFrame.from_dict(ShopifyDict)
    WORKDIR = "c:\\temp"
    DESKTOP = 'c:' + os.environ['HOMEPATH'] + "\Desktop"
    os.chdir(DESKTOP)
    SHdf.to_excel("CJ_Orders_Status_On_Shopify.xlsx")
    return SHdf



#Program Main

main()
